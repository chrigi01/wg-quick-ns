#!/bin/bash

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Usage: wg-quick-ns [ up | down | status ] [ INTERFACE ]
#        wg-quick-ns [ restart ]            [ INTERFACE ]
#        wg-quick-ns [ exec ]               [ INTERFACE ] [ statement ]
#        wg-quick-ns [ service ]            [ INTERFACE ] [ add | del ]
#        wg-quick-ns [ update ] 
#        wg-quick-ns [ help | version ] 
# 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#   
# 2022-11-25 0.1 initial Version
# 2022-11-27 0.2 added service for automatic wg restart when manually change wg config
# 2022-11-28 0.3 added dirty hack to bypass "wg setconf" limitations
# 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

SCRIPTNAME=wg-quick-ns
SCRIPTPATH=/usr/bin
VERSION=0.3
WGIF=$2
WGCONF=/etc/wireguard/${WGIF}.conf
WGCONFTMP=/tmp/${WGIF}.conf
WGTUNNELIP=10.0.0.1/32
NSNAME=${WGIF}-ns

SERVICE1=wg-server-${WGIF}.service
SERVICE2=wg-config-${WGIF}.path
SERVICE3=wg-config-${WGIF}.service
SERVICEDIR=/etc/systemd/system
SERVICEFILE1=${SERVICEDIR}/${SERVICE1}
SERVICEFILE2=${SERVICEDIR}/${SERVICE2}
SERVICEFILE3=${SERVICEDIR}/${SERVICE3}
SERVICEFILETEMP=${SERVICE}.temp

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# wg-quick-ns specitic functions

check-config() {
	if [ ! -f "${WGCONF}" ]; then
  	  echo "${WGCONF} does not exist."
	  exit 1
	fi
	
	# clean wg-config  
	# due to limitaions of wg setconf 

	cat ${WGCONF} > ${WGCONFTMP} 

	sed -i '/Address =/d' ${WGCONFTMP}
	sed -i '/MTU =/d' ${WGCONFTMP}
	sed -i '/PostUp =/d' ${WGCONFTMP}
	sed -i '/PostDown =/d' ${WGCONFTMP}
	
	sudo mv ${WGCONFTMP} ${WGCONF}
	sudo chmod 666 ${WGCONF} 
	sudo chown root:root ${WGCONF}
}

up() {
	check-config
	sudo /bin/ip netns add ${NSNAME}
	sudo /bin/ip link add ${WGIF} type wireguard
	sudo /bin/ip link set ${WGIF} netns ${NSNAME}
	sudo /bin/ip -n ${NSNAME} addr add ${WGTUNNELIP} dev ${WGIF}
	sudo /bin/ip netns exec ${NSNAME} wg setconf ${WGIF} ${WGCONF}
	sudo /bin/ip -n ${NSNAME} link set ${WGIF} up
	sudo /bin/ip -n ${NSNAME} route add default dev ${WGIF}
	echo "interface ${WGIF} up"
}

down() {
	sudo /bin/ip netns del ${NSNAME}
	echo "interface ${WGIF} down"
}

state() {
	execute "wg show"
}

execute() {
	sudo /bin/ip netns exec ${NSNAME} $1
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# framework functions

create_service_wg-server() {
	cat <<EOF > ${SERVICEFILETEMP}
[Unit]
Description=WireGuard ${WGIF} service

[Service]
Type=oneshot
RemainAfterExit=yes

ExecStart=/usr/bin/wg-quick-ns up ${WGIF}
ExecStop=/usr/bin/wg-quick-ns down ${WGIF}

User=root
Group=root

[Install]
WantedBy=multi-user.target
WantedBy=network-online.target
EOF
	sudo cp ${SERVICEFILETEMP} ${SERVICEFILE1}
	rm ${SERVICEFILETEMP}

	echo "${SERVICEFILE1} was created"
}

create_service_wg-config() {
# Part 1: tartget file
	cat <<EOF > ${SERVICEFILETEMP}
[Unit]
Description=Watch ${WGCONF} for changes

[Path]
PathModified=${WGCONF}

[Install]
WantedBy=multi-user.target
EOF
	sudo cp ${SERVICEFILETEMP} ${SERVICEFILE2}
	rm ${SERVICEFILETEMP}

	echo "${SERVICEFILE2} was created"

# Part 2: service file
	cat <<EOF > ${SERVICEFILETEMP}
[Unit]
Description=restart Wireguard Server ${WGIF}
After=network.target

[Service]
Type=oneshot
ExecStart=/bin/systemctl restart ${SERVICE1}

[Install]
RequiredBy=${SERVICE2}
EOF

	sudo cp ${SERVICEFILETEMP} ${SERVICEFILE3}
	rm ${SERVICEFILETEMP}

	echo "${SERVICEFILE3} was created"
}


service_add() {
	create_service_wg-server
	create_service_wg-config
	sudo systemctl daemon-reload
	sudo systemctl enable ${SERVICE1} ${SERVICE2} ${SERVICE3}
	echo "service ${SERVICE1}, ${SERVICE2}, ${SERVICE3} added"
	echo ""
	echo "Usage: sudo systemctl start|stop|status ${SERVICE1}"
	echo "       sudo systemctl start|stop|status ${SERVICE2}"
	echo "       sudo systemctl start|stop|status ${SERVICE3}"
}

service_del() {
	sudo systemctl disable ${SERVICE1} ${SERVICE2} ${SERVICE3}
        sudo rm ${SERVICEFILE1}
        sudo rm ${SERVICEFILE2}
        sudo rm ${SERVICEFILE3}
	sudo systemctl daemon-reload 
	echo "service ${SERVICE1}, ${SERVICE2}, ${SERVICE2} deleted"
}

update() {
	# sudo apt-get wireguard curl
	# curl 
	sudo cp ${SCRIPTNAME} ${SCRIPTPATH}
        sudo chown root:root ${SCRIPTPATH}/${SCRIPTNAME}
        sudo chmod 755 ${SCRIPTPATH}/${SCRIPTNAME}
	
	echo -n "upgraded to "
        sudo ${SCRIPTPATH}/${SCRIPTNAME} version
}

version() {
	echo ${SCRIPTNAME}" "${VERSION}
}

help() {
	case "$1" in
	1)
		echo "Usage: wg-quick-ns [ up | down | status ] [ INTERFACE ]"
		echo "       wg-quick-ns [ help ]"
		;;
	2)	
		echo "Usage: wg-quick-ns [ up | down | status ] [ INTERFACE ]"
		echo "       wg-quick-ns [ restart ]            [ INTERFACE ]"
		echo "       wg-quick-ns [ exec ]               [ INTERFACE ] [ statement ]"
		echo "       wg-quick-ns [ service ]            [ INTERFACE ] [ add | del ]"
		echo "       wg-quick-ns [ update ]"
		echo "       wg-quick-ns [ help | version ]"
		;;
	*)	
		echo "What are you doing?"
		exit 1
		;;
	esac
}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
# main

case "$2" in
'')
	case "$1" in
	update)
		update
		;;
	version)
		version
		;;
	help)
		help 2
		;;
	*)
		help 1
		exit 1
		;;
	esac
	;;
*)
	case "$1" in
	up)
		up
		;;
	down)	
		down
		;;
	status)
		state
		;;
	restart)
		down
		up
		;;
	exec)	
		execute "$3"
		;;
	service)
		case "$3" in
			add)
				service_add
				;;
			del)
				service_del
				;;
			*)
				help 2
				exit 1
				;;
		esac
		;;
	help)
		help 2
		;;
	*)
		help 1
		exit 1
		;;
	esac
	;;
esac

exit 0

